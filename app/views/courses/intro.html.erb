<div class="container">
  <div class="row">
    <div class="span8">
      <h1>Iron Board</h1>
      <hr>
      <h3>Overview</h3>
          
      <div class="well">
<section id="overview">
  <%= image_tag "avi.png", :align => "right", :width => "330px" %>

  <p><img src="http://dailydropcap.com/images/I-11-cap.png" title="Daily Drop Cap by Jessica Hische" align="left" alt="I"/>n this document you're going to find a ton of reading, videos, and quizzes that Flatiron students complete before their semester even begins. We thought we'd open source this material. We suggest going through this material linearly because it really represents a progressive journey through the fundamentals and abstractions required to build web applications. Enjoy.</p>

  <p>The main topics we want students to know about before the semester starts are on the left: Internet Basics, Command-Line Interface, Git Version Control, SQL and Databases, HTML, CSS, Javascript and jQuery, Ruby, and Ruby on Rails.</p>

  <p>Each resource has an estimated amount of time it should take you if you have 0 prior knowledge on the topic. In total, if you are coming to this with absolutely no experience, as in, you'd have trouble articulating what the topic even is, then we estimate this work will take you between 80 - 100 hours to complete. If you are a rockstar, this shouldn't take more than 20 hours.</p>

  <p>If you are familiar with the topic, we highly suggest trying to take the quiz or challenge first. If you pass easily and collect the badge, great, move on. That being said, even we found ourselves learning new things during this assessment, so maybe try to watch the videos on the topics with which you are most unfamiliar.</p>

  <p>In terms of reading and watching videos, feel free to skip through - go for overall coverage as opposed to depth - try to read and watch as much as possible and then try to take the quiz. Be quick, and then do a 2nd round of reading and watching.</p>

  <h2 id="setup">Setup</h2>
  <p>
    To complete these units, you will need a <a href="http://teamtreehouse.com">Treehouse</a> and <a href="http://www.codeschool.com/enrollments/dnFtaXFMbXROSVVqT3N1bngwWnBRUjhGc2k1Z1dEOW52cFJvZEMzRUZvRT0tLWpvUElMODBvdFhiZlA4MjE2Mlc2c1E9PQ==">CodeSchool</a> account. They are both normally $25 a month, so figure you might spend $50-$100 depending on how quickly you get through the material. So far the fine folks at <a href="http://www.codeschool.com/enrollments/dnFtaXFMbXROSVVqT3N1bngwWnBRUjhGc2k1Z1dEOW52cFJvZEMzRUZvRT0tLWpvUElMODBvdFhiZlA4MjE2Mlc2c1E9PQ==">CodeSchool</a> have created a $9 trial month for all Flatiron Preworkers. So register using that link. Treehouse will offer something similar soon.
  </p>
  <p>You should also have a Rails Development environment setup. There are lots of guides for that on the internet and depending on your OS and setup, it's a bit of a process. You could always use the cross-platform <a href="http://railsinstaller.org/">Rails Installer</a>.</p>

  <h2 id="thoughts">Thoughts</h2>
  <p>
    One of the challenges in learning how to code is that you probably don't even know what you're suppose to learn. When creating this prework, we had 4 goals in mind.
  </p>
  <ol>
    <li>
      <strong>Full Stack</strong><br />
      To present the full stack of technologies required to build a webapp from the ground up. We don't care if you use ERB or HAML, the web is built on HTML, everyone should learn it. Whether NoSQL or RDBMS, understanding the fundamentals of schema design and SQL is crucial. Students shouldn't shy away from depth. How can you be a web developer without a proficiency in these skills?
    </li>

    <li>
      <strong>Linear Progression</strong><br/ >
      The material is presented in order, going from computer / web basics, to data theory, to markup, to styling, to programming, and then to version control. At that point, you've become familiar enough with general syntax and your computer to start learning to program. You learn the basics of code through Ruby and Javascript and then finally move to Rails that builds upon the rest. Thus you start at the lowest level, the literal HTML the browser renders, and progress up through levels of abstraction until you finally get to the kitchen sink that is the Rails framework. As a beginner, don't try to learn Rails without knowing basic HTML/CSS, Ruby, and Javascript. It's a disservice to your education.
    </li>


    <li>
      <strong>Curated Resources</strong><br/>
      There is such a plethora of amazing content on learning to code. We liked the consistency of going to a few sources that all shared common interfaces and learning patterns, like videos and interactive portions. So this isn't a complete list of all the resources, but more a curated list of what we think works well together (with lots of feedback from alumni). We would love it if you submitted a github issue with more materials you've enjoyed.
    </li>

    <li>
      <strong>Language Agnosticism</strong><br/>
      In the end, programming is about abstractions and expressions, the mechanics of code are universal and exist in all modern languages, python, ruby, and javascript. We teach Ruby because we love it. Thinking your language choice, especially as a beginner, matters, is like thinking that you can only write poetry in English and not in Spanish. Obviously the beauty of poetry is in rhyme and meter, in metaphor and simile, in cadence and rhythm, not in the king's English. Why should code be any different? At Flatiron, you're learning how to think, how to break problems down, how to express yourself, how to abstract ideas, and how to work together. We just learn that through Ruby.
    </li>
  </ol>
  <h2>Why Share It?</h2>
  <p>
    You might be wondering why we would share our curriculum if we are in the education business. First, we honestly do not think that going through this content alone will make anyone a web developer. That's like saying that knowing how to hammer a nail means you can build a house. Sure, you've got the gestures and mechanics down, maybe, but you don't know the first thing about building. There is just so much more to being a developer than the syntax of how to define a method or iterate over an array. We don't focus on content at the Flatiron School. We focus on learning to love code.</p>

    <blockquote>
      <p>If you want to build a ship, donâ€™t drum up the men to gather wood, divide the work and give orders. Instead, teach them to yearn for the vast and endless sea.</p><br>
      <cite><em>Antoine de Saint-Exupery</em></cite>
    </blockquote>
  </p>
</section>
<%= link_to "Start Pre-Work!", prework_path, :class => 'btn btn-primary btn-large' %>

      </div> <!-- well -->
    </div> <!-- span8 -->
  </div> <!-- row -->
</div> <!-- container -->

